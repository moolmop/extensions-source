name: CI

on:
  push:
    branches:
      - main
    paths:
      - '**'
      - '!**.md'
      - '!.github/**'
      - '.github/scripts/**'
      - '.github/workflows/build_push.yml'

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  CI_CHUNK_SIZE: 65

jobs:
  prepare:
    name: Prepare job
    runs-on: ubuntu-latest
    outputs:
      individualMatrix: ${{ steps.generate-matrices.outputs.individualMatrix }}
    steps:
      - name: Clone repo
        uses: actions/checkout@v4.2.2

      - name: Validate Gradle Wrapper
        uses: gradle/actions/wrapper-validation@v4.2.0

      - name: Get number of modules
        run: |
          set -x
          projects=(src/*/*)
          echo "NUM_INDIVIDUAL_MODULES=${#projects[@]}" >> $GITHUB_ENV

      - id: generate-matrices
        name: Create output matrices
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const numIndividualModules = process.env.NUM_INDIVIDUAL_MODULES;
            const chunkSize = process.env.CI_CHUNK_SIZE;
            const numIndividualChunks = Math.ceil(numIndividualModules / chunkSize);
            console.log(`Individual modules: ${numIndividualModules} (${numIndividualChunks} chunks of ${chunkSize})`);
            core.setOutput('individualMatrix', { 'chunk': [...Array(numIndividualChunks).keys()] });

  build_individual:
    name: Build individual modules
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.individualMatrix) }}
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4.2.2

      - name: Set up JDK
        uses: actions/setup-java@v4.5.0
        with:
          java-version: 17
          distribution: temurin

      - name: Prepare signing key
        run: |
          echo "BASE64_ENCODED_SIGNING_KEY_CONTENT" | base64 -d > signingkey.jks

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4.2.0
        with:
          cache-read-only: false

      - name: Build extensions
        env:
          CI_CHUNK_NUM: 1 # Replace with the chunk number as needed
          ALIAS: "your_alias" # Replace with your alias
          KEY_STORE_PASSWORD: "your_keystore_password" # Replace with your keystore password
          KEY_PASSWORD: "your_key_password" # Replace with your key password
        run: ./gradlew -p src assembleRelease

      - name: Upload APKs (chunk ${{ matrix.chunk }})
        uses: actions/upload-artifact@v4.4.3
        if: "github.repository == 'moolmop/extensions-source'"
        with:
          name: "individual-apks-${{ matrix.chunk }}"
          path: "**/*.apk"
          retention-days: 1

      - name: Clean up CI files
        run: rm signingkey.jks

  publish_repo:
    name: Publish repo
    needs:
      - build_individual
    if: "github.repository == 'moolmop/extensions-source'"
    runs-on: ubuntu-latest
    steps:
      - name: Download APK artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          path: ~/apk-artifacts

      - name: Set up JDK
        uses: actions/setup-java@v4.5.0
        with:
          java-version: 17
          distribution: temurin

      - name: Checkout main branch
        uses: actions/checkout@v4.2.2
        with:
          ref: main
          path: main

      - name: Create repo artifacts
        run: |
          cd main
          python ./.github/scripts/move-apks.py
          INSPECTOR_LINK="$(curl -s "https://api.github.com/repos/keiyoushi/extensions-inspector/releases/latest" | jq -r '.assets[0].browser_download_url')"
          curl -L "$INSPECTOR_LINK" -o ./Inspector.jar
          java -jar ./Inspector.jar "repo/apk" "output.json" "tmp"
          python ./.github/scripts/create-repo.py

      - name: Checkout repo branch
        uses: actions/checkout@v4.2.2
        with:
          repository: moolmop/extensions
          token: ${{ secrets.BOT_PAT }}
          ref: repo
          path: repo

      - name: Deploy repo
        run: |
          cd repo
          ../main/.github/scripts/commit-repo.sh
